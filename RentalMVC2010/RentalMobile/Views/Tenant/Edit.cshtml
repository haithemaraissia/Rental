@model RentalMobile.Models.Tenant
@{
    ViewBag.Title = "Edit Tenant Profile";
    Layout = "~/Views/Shared/_ConceptLayoutPage.cshtml";

}
<h2>
    Edit</h2>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script>

    function is_int(value) {
        if ((parseFloat(value) == parseInt(value)) && !isNaN(value)) {
            return true;
        } else {
            return false;
        }
    }

    $(function () {

        // Set up
        $(".fancy-form div > div").hide();
        var firstReveal = true;

        $("#zip").keyup(function () {

            // Cache 
            var el = $(this);

            // Did they type five integers?
            if ((el.val().length == 5) && (is_int(el.val()))) {

                // Call Ziptastic for information
                $.ajax({
                    url: "http://zip.elevenbasetwo.com",
                    cache: false,
                    dataType: "json",
                    type: "GET",
                    data: "zip=" + el.val(),
                    success: function (result, success) {

                        $(".zip-error, .instructions").slideUp(200);

                        $("#city").val(result.city);

                        $("#state").val(result.state);

                        $(".fancy-form div > div").slideDown();

                        if (firstReveal) {
                            // Ghetto but without this timeout the field doesn't
                            // take focus for some reason.
                            setTimeout(function () { $("#address-line-1").focus(); },
                                400);
                        };

                        firstReveal = false;

                    },
                    error: function (result, success) {

                        $(".zip-error").slideDown(300);

                    }

                });

            } else if (el.val().length < 5) {

                $(".zip-error").slideUp(200);

            };

        });

    }); // END DOM Ready

</script>
<style>
    .fancy-form
    {
        background: #f7f7f7;
        border-radius: 6px;
        padding: 20px;
        box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2), inset 0px 0px 0px 1px rgba(255, 255, 255, 1);
        border: 1px solid #B2B2B2;
    }
    
    .fancy-form input
    {
        -webkit-transition: all 0.3s ease-out;
        -moz-transition: all 0.3s ease-out;
        -o-transition: all 0.3s ease-out;
        transition: all 0.3s ease-out;
    }
    
    .fancy-form input[type="text"]
    {
        outline: none;
        border: 1px solid #cccccc;
        box-shadow: 0px 0px 0px 4px rgba(0, 0, 0, 0.1), inset 0px 1px 0px 0px rgba(255, 255, 255, 1), inset 0px 1px 6px 0px rgba(0, 0, 0, 0.05);
        border-radius: 3px;
        padding: 7px 10px;
        background: #f1f1f1;
        color: #b5b5b5;
        margin-bottom: 4px;
    }
    
    .fancy-form input[type="text"]:hover
    {
        background: #f7f7f7;
    }
    
    .fancy-form input[type="text"]:focus
    {
        box-shadow: 0px 0px 0px 5px rgba(0, 0, 0, 0.1), 0px 1px 5px 0px rgba(0, 0, 0, 0.2), inset 0px 1px 6px 0px rgba(0, 0, 0, 0.1);
        background: #fff;
        border-color: transparent;
        color: #565656;
    }
    
    .fancy-form fieldset
    {
        border: none;
        padding: 25px 10px 10px 10px;
    }
    
    .fancy-form legend
    {
        font: 26px "Lucida Sans Unicode" , "Lucida Grande" , sans-serif;
        text-transform: uppercase;
        text-shadow: 0 1px 1px #fff;
        color: #1b6d8e;
        padding: 0 5px;
    }
    
    .fancy-form label
    {
        display: block;
        font: 14px Arial, Helvetica, sans-serif;
        padding-left: 10px;
        letter-spacing: 1px;
        padding-left: 10px;
        color: #1b6d8e;
        opacity: 0.8;
    }
    .fancy-form input:focus + label
    {
        opacity: 1.0;
    }
    
    .fancy-form input:not([type=submit])
    {
        width: 100%;
        display: block;
    }
    
    .submit-wrap
    {
        display: none;
    }
    
    .fancy-form input[type="submit"]
    {
        padding: 10px 40px;
        border: 1px solid #a9d9fa;
        background: url(../images/submit_btn_gradient.png) repeat-x #69c4e7;
        border: 1px solid #5cb0d2;
        box-shadow: 0px 0px 0px 4px rgba(210, 210, 210, 1), inset 0px 1px 1px 0px rgba(255, 255, 255, 0.6), inset 0px 1px 20px 0px rgba(255, 255, 255, 0.2), inset 0px -1px 0px 0px rgba(0, 0, 0, 0.4);
        font: bold 16px Arial, Helvetica, sans-serif;
        border-radius: 40px;
        color: #2190bd;
        text-shadow: 0 1px 0 rgba(255,255,255,0.5);
        cursor: pointer;
        outline: none;
    }
    
    .fancy-form input[type="submit"]:hover
    {
        background-color: #88daf6;
        color: #1b6d8e;
    }
    
    .fancy-form input[type="submit"]:active
    {
        background-color: #69c4e7;
        box-shadow: 0px 0px 0px 4px rgba(0, 0, 0, 0.1), inset 0px -1px 1px 0px rgba(255, 255, 255, 0.6), inset 0px 5px 20px 0px rgba(0, 0, 0, 0.1), inset 0px 1px 0px 0px rgba(0, 0, 0, 0.2);
        color: #2190bd;
        -webkit-transition: all 0.1s ease-out;
        -moz-transition: all 0.1s ease-out;
        -o-transition: all 0.3s ease-out;
        -ms-transition: all 0.1s ease-out;
    }
    
    .fancy-form div
    {
        margin: 0 0 6px 0;
        clear: both;
    }
    
    .fancy-form div > div
    {
        padding: 4px;
    }
    
    .fancy-form .city-wrap
    {
        width: 69%;
        margin-right: 1%;
    }
    
    .fancy-form .state-wrap
    {
        width: 9%;
        margin-right: 1%;
    }
    
    .fancy-form .zip-wrap
    {
        width: 20%;
        display: block !important;
    }
    
    .zip-error
    {
        color: #d70000;
        font: 12px "Lucida Sans Unicode" , "Lucida Grande" , sans-serif;
        border-top: 2px dotted #ec9696;
        border-bottom: 2px dotted #ec9696;
        text-align: center;
        padding: 5px 10px;
        margin-top: 10px;
        display: none;
    }
</style>
<section class="sixteen columns add-bottom relative">
    @using (Html.BeginForm("Edit", "Tenant", FormMethod.Post, new { @class = "fancy-form" }))
    {
        @Html.ValidationSummary(true)
        <fieldset>
            <legend>Tenant</legend>
            @Html.HiddenFor(model => model.TenantId)
            <div class="editor-label">
                @Html.LabelFor(model => model.FirstName)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.FirstName)
                @Html.ValidationMessageFor(model => model.FirstName)
            </div>
            <br />
            <div class="editor-label">
                @Html.LabelFor(model => model.LastName)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.LastName)
                @Html.ValidationMessageFor(model => model.LastName)
            </div>
            <br />
            <div class="editor-label">
                @Html.LabelFor(model => model.Address)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Address)
                @Html.ValidationMessageFor(model => model.Address)
            </div>
            <br />
            <!--OVER HERE -->
            <!--OVER HERE -->
            <div class="editor-label">
                @Html.LabelFor(model => model.EmailAddress)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.EmailAddress)
                @Html.ValidationMessageFor(model => model.EmailAddress)
            </div>
            <br />
            <div class="editor-label">
                @Html.LabelFor(model => model.Description)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Description)
                @Html.ValidationMessageFor(model => model.Description)
            </div>
            <br />
            <div class="editor-label">
                @Html.LabelFor(model => model.GUID)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.GUID)
                @Html.ValidationMessageFor(model => model.GUID)
            </div>
            <br />
            <div class="editor-label">
                @Html.LabelFor(model => model.VCard)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.VCard)
                @Html.ValidationMessageFor(model => model.VCard)
            </div>
            <br />
            <div class="editor-label">
                @Html.LabelFor(model => model.Skype)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Skype)
                @Html.ValidationMessageFor(model => model.Skype)
            </div>
            <br />
            <div class="editor-label">
                @Html.LabelFor(model => model.Twitter)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Twitter)
                @Html.ValidationMessageFor(model => model.Twitter)
            </div>
            <br />
            <div class="editor-label">
                @Html.LabelFor(model => model.LinkedIn)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.LinkedIn)
                @Html.ValidationMessageFor(model => model.LinkedIn)
            </div>
            <br />
            <div class="editor-label">
                @Html.LabelFor(model => model.GooglePlus)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.GooglePlus)
                @Html.ValidationMessageFor(model => model.GooglePlus)
            </div>
            <br />
            <p class="instructions">
                zipcode
            </p>
            <div>
                <div class="editor-label">
                    <label for="address-line-1">
                        Street #1</label>
                        </div>
                         <div class="editor-label">
                    @Html.EditorFor(model => model.Address, new { id = "address-line-1", name = "address-line-1" })
                </div>
            </div>
            <div>
                <div class="editor-label">
                    <label for="address-line-2">
                        Street #2</label>
                        </div>
                         <div class="editor-label">
                    @Html.EditorFor(model => model.Address, new { id = "address-line-2", name = "address-line-2" })
                </div>
            </div>
            <div>
               <div class="editor-label">
                   <label for="city">
                       City</label>
                       </div>
                       <div class="editor-label">
                    @Html.TextBoxFor(model => model.City, new { id = "city", name = "city" })
                </div>
                <div class="editor-label">
                    <label for="state">
                        State</label>
                        </div>
                        <div class="editor-label">
                    @Html.TextBoxFor(model => model.Region, new { id = "state", name = "state" })
                </div>
                <div class="zip-wrap">
                    <div class="editor-label">
                        <label for="zip">
                            Zip</label></div>
                            
                                <input type="text" pattern="[0-9]*" maxlength="5" required name="zip" id="zip">
                                
                    <p class="zip-error">
                        Not a real zip code.</p>
                </div>
            </div>
            @*   <div class="editor-label">
            @Html.LabelFor(model => model.Country)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Country)
            @Html.ValidationMessageFor(model => model.Country)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Region)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Region)
            @Html.ValidationMessageFor(model => model.Region)
        </div>

        <div class="city-wrap">
            @Html.DisplayFor(model => model.City, new { id = "city", name = "city" })
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.City)
            @Html.ValidationMessageFor(model => model.City)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Zip)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Zip)
            @Html.ValidationMessageFor(model => model.Zip)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.CountryCode)
        </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.CountryCode)
                @Html.ValidationMessageFor(model => model.CountryCode)
            </div>
            
*@
            <p>
                <input type="submit" value="Save" />
            </p>
            <div class="submit-wrap">
                <input type="submit" value="Submit">
            </div>
        </fieldset>
    }
</section>
<div>
    @Html.ActionLink("Update Picture", "UpdateProfilePicture", "Tenant", new { id = Model.TenantId }, null)
</div>
<div>
    @Html.ActionLink("Back", "Index")
</div>
